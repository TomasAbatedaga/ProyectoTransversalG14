package Vista;

import Modelo.Alumno;
import Modelo.Inscripcion;
import Modelo.Materia;
import Persistencia.AlumnoData;
import Persistencia.InscripcionData;
import Persistencia.MateriaData;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class VistaCargarNotas extends javax.swing.JInternalFrame {

    private DefaultTableModel modeloNotas = new DefaultTableModel();
    private DefaultTableModel modelo = new DefaultTableModel();
    private List<Alumno> listAlumno;
    private List<Materia> listMateria;
    private List<Inscripcion> listainscripcion;
    private InscripcionData Inscripcionins;
    private MateriaData materiam;
    private AlumnoData Alumnoa;
    private Inscripcion inscripcion = null;
    private Materia materia = null;
    private Alumno Alumno;

    /**
     * Creates new form VistaCargarNotas
     */
    public VistaCargarNotas() {
        initComponents();
        Alumnoa = new AlumnoData();
        modeloNotas = new DefaultTableModel() {
            public boolean isCellEditable(int row, int column) {
                if (column == 2) {
                    return true;
                }else return false;
            }
        };
       
        modeloNotas = new DefaultTableModel();
        modelo = new DefaultTableModel();
        inscripcion = new Inscripcion();
        Inscripcionins = new InscripcionData();
        materiam = new MateriaData();

        cargarAlumnos();
        armarCabecera();
        borrarFila();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_titulo = new javax.swing.JLabel();
        lbl_seleccion = new javax.swing.JLabel();
        JseleccionarAlum = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTMaterias = new javax.swing.JTable();
        btn_guardar = new javax.swing.JButton();

        setClosable(true);

        lbl_titulo.setText("Carga de Notas");

        lbl_seleccion.setText("Seleccione un Alumno :");

        JseleccionarAlum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JseleccionarAlumActionPerformed(evt);
            }
        });

        JTMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(JTMaterias);

        btn_guardar.setText("Guardar");
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_seleccion)
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_titulo)
                            .addComponent(JseleccionarAlum, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_guardar)
                .addGap(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_titulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_seleccion)
                    .addComponent(JseleccionarAlum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(btn_guardar)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JseleccionarAlumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JseleccionarAlumActionPerformed
        modeloNotas.setRowCount(0);

        Alumno elegido = (Alumno) JseleccionarAlum.getSelectedItem();
        if (elegido == null) {
            return;
        }

        listainscripcion = Inscripcionins.obtenerInscripcioneID(elegido.getId_alumno());

        if (listainscripcion != null && !listainscripcion.isEmpty()) {

            for (Inscripcion insc : listainscripcion) {

                if (insc.getMateria() != null) {

                    Object[] fila = {
                        insc.getMateria().getId_materia(),
                        insc.getMateria().getNombre(),
                        insc.getNota()
                    };

                    modeloNotas.addRow(fila);

                } else {
                    Object[] fila = {0, "Materia corrupta", 0};
                    modeloNotas.addRow(fila);
                }
            }
        } else {
            System.out.println("El alumno no tiene inscripciones.");
        }
    }//GEN-LAST:event_JseleccionarAlumActionPerformed

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
    if (JTMaterias.isEditing()) {
        JTMaterias.getCellEditor().stopCellEditing();
    }
        
    Alumno alumnoSeleccionado = (Alumno) JseleccionarAlum.getSelectedItem();
    if (alumnoSeleccionado == null) {
        JOptionPane.showMessageDialog(this, "Error: No hay un alumno seleccionado.");
        return;
    }
    int idAlumno = alumnoSeleccionado.getId_alumno();
    int filaSeleccionada = JTMaterias.getSelectedRow();
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una materia de la tabla para guardar la nota.");
        return;}
    try {
        int idMateria = (Integer) JTMaterias.getValueAt(filaSeleccionada, 0);
        int nuevaNota = Integer.parseInt(JTMaterias.getValueAt(filaSeleccionada, 2).toString());

        Inscripcionins.actualizarNota(idAlumno, idMateria, nuevaNota);

      

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Error: La nota debe ser un número válido (ej. 8.5).");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al guardar la nota: " + e.getMessage());
        
    }

    }//GEN-LAST:event_btn_guardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTMaterias;
    private javax.swing.JComboBox<Alumno> JseleccionarAlum;
    private javax.swing.JButton btn_guardar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_seleccion;
    private javax.swing.JLabel lbl_titulo;
    // End of variables declaration//GEN-END:variables

    private void cargarAlumnos() {
        JseleccionarAlum.removeAllItems();
        try {
            List<Alumno> lista = Alumnoa.listarAlumnos();
            for (Alumno item : lista) {
                JseleccionarAlum.addItem(item);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar alumnos: " + ex.getMessage());
        }
    }

    private void armarCabecera() {
        modeloNotas.addColumn("ID");
        modeloNotas.addColumn("Nombre");
        modeloNotas.addColumn("Nota");
        JTMaterias.setModel(modeloNotas);
    }

    private void borrarFila() {
        int ind = modelo.getRowCount() - 1;
    }
}
